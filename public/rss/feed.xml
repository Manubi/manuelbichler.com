<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Manuel Bichler</title>
        <link>http://localhost:3000</link>
        <description>Your blog description</description>
        <lastBuildDate>Fri, 02 Feb 2024 12:53:14 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>Manuel Bichler</title>
            <url>http://localhost:3000/favicon.ico</url>
            <link>http://localhost:3000</link>
        </image>
        <copyright>All rights reserved 2024</copyright>
        <item>
            <title><![CDATA[The year of inconvenience]]></title>
            <link>http://localhost:3000/articles/year-of-inconvenience</link>
            <guid>http://localhost:3000/articles/year-of-inconvenience</guid>
            <pubDate>Fri, 02 Feb 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Already thinking about a description of the following text seems very inconvenient.]]></description>
            <content:encoded><![CDATA[<p>In today&#x27;s world, we&#x27;re often sold the idea that instant gratification is synonymous with success. However, my experience tells a different story. Much of what I&#x27;ve learned as an adult resulted from enduring challenges and tackling concepts that initially seemed insurmountable. Like how water shapes stones over time, the human mind, too, adapts and learns, gradually overcoming obstacles. Consistent, day-by-day effort eventually demystifies new interests. Indeed, it appears that truly understanding something worthwhile takes about a year.</p>
<h2>Slow is smooth and smooth is fast</h2>
<p>Adult learning is a test of perseverance. Unlike in our younger years, when progress seemed more direct, acquiring new skills now requires patience and sustained effort. The journey involves daily dedication, often extending over months or even years. The easy pickings are gone; what&#x27;s left demands more of us, challenging us to dig deeper.</p>
<h2>Commitment is all it takes</h2>
<p>Reflecting on my own journey, the pivotal moment came in 2017 when I decided to learn programming. That year was transformative. It was filled with days dedicated to understanding the workings of computers. Sure, there were moments of frustration, like when a day was lost searching for a misplaced semicolon, leading me to question my choices. Yet, that year reshaped my career and me profoundly. It proved I could master almost anything independently, without seeking validation for my intelligence.</p>
<p>2024 promises to be another challenging year. It&#x27;ll be slow and sometimes arduous, but I anticipate finding joy in the challenge and emerging more fulfilled. After all, the highs wouldn&#x27;t feel as sweet without the lows.</p>]]></content:encoded>
            <author>bichler@gmail.com (Manuel Bichler)</author>
        </item>
        <item>
            <title><![CDATA[Authentication in Next.js with Clerk.com and trpc.io]]></title>
            <link>http://localhost:3000/articles/auth-clerk-nextjs</link>
            <guid>http://localhost:3000/articles/auth-clerk-nextjs</guid>
            <pubDate>Thu, 01 Feb 2024 00:00:00 GMT</pubDate>
            <description><![CDATA[Painless Next.js authentication. With Clerk.com and trpc.io, we can now build a secure authentication system in a day.]]></description>
            <content:encoded><![CDATA[<p>When I started out as a dev, authentication always felt a little bit intimidating. So many new concepts to learn, so many new libraries to install, so many new things to configure. And there is the angst of implementing an unsecure system. Just to finally end up with a system that allows users to login. It was a pain.</p>
<p>Don&#x27;t get me wrong, struggling is good. It&#x27;s how we learn. And there is definitely a benefit if you&#x27;ve implemented authentication a couple of times from scratch.
But roling our own authentication comes with a downside. You have to maintain it. And if you&#x27;re like me, you&#x27;ll probably have more interesting problems to solve then keeping our authentication system up to date.
So as I said, if you&#x27;re interested in how stuff works, do it yourself. But trust me, it will become a pain in the ass, especially if you&#x27;re working on more projects.
Anyway, let&#x27;s dive in. By the way, all the code can be found <a href="https://github.com/Manubi/manuelbichler">here</a>. It&#x27;s this page - manuelbichler.com</p>
<h2>Tech stack</h2>
<ul>
<li>Next.js</li>
<li>trpc.io</li>
<li>Clerk.com</li>
</ul>
<h2>Setting things up</h2>
<p>Im not gonna write about setting up Next.js nor trpc. This is only about adding authentication with Clerk.com.
The basic workflow is.</p>
<ol>
<li>Register at Clerk.com and install <code>npm i @clerk/nextjs</code></li>
<li>Add AuthProvider for public and protected pages</li>
<li>Add Sign-in and Sign-out buttons/components</li>
<li>Add middleware to use auth in trpc</li>
<li>Add auth to trpc context</li>
<li>Protect our routers/procedures with auth/authorization</li>
<li>Add a webhook to update our database when user details change in clerk.com</li>
<li>Add another field to our JWT token</li>
<li>Add social connection provider for productio - Google</li>
<li>Time to be &#x27;Happy, peppy and cheerful&#x27; ðŸŽ‰</li>
</ol>
<h2>1. Register at Clerk.com and install package</h2>
<p>Go to Clerk.com/register, install the package <code>npm i @clerk/nextjs</code> and copy our api keys in our <code>.env.local</code> file.</p>
<h2>2. Add AuthProvider with public and protected routes</h2>
<p>As with almost everything in React that you&#x27;ll need in our whole app, needs to be a context provider.
It&#x27;s basically our parent giving information to all children which are our Components. First I&#x27;ll give you the basic version of the <code>_app.tsx</code>. Further downn you&#x27;ll see a more realistic version.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/pages/_app.tsx</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">ClerkProvider</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs&#x27;</span>
<span class="token keyword module">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> <span class="token maybe-class-name">AppProps</span> <span class="token punctuation">}</span> <span class="token keyword module">from</span> <span class="token string">&#x27;next/app&#x27;</span>

<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyApp</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token maybe-class-name">Component</span><span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">AppProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token maybe-class-name">ClerkProvider</span> <span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token maybe-class-name">Component</span> <span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">ClerkProvider</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">MyApp</span>
</code></pre>
<p>This gives you access to the Clerk context in all our components. But you still need to add the sign-in and sign-out buttons/pages. So let&#x27;s do that first.</p>
<h2>3. Add Sign-in and Sign-out buttons/components</h2>
<p>Here we add a simple sign-up modal on the <code>/sign-up</code> page and a sign-out button on the Profiledropdownmenu in the second step.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">SignUp</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs&#x27;</span>

<span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">SignUpPage</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;relative my-20 flex justify-center&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token maybe-class-name">SignUp</span> path<span class="token operator">=</span><span class="token string">&quot;/sign-up&quot;</span> routing<span class="token operator">=</span><span class="token string">&quot;path&quot;</span> signInUrl<span class="token operator">=</span><span class="token string">&quot;/sign-in&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>
<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">SignUpPage</span>
</code></pre>
<p>The <code>path</code> tells clerk when/where it should mount the component. In our case when the user is on the /sign-up page. The <code>routing</code> prop tells clerk how to handle the routing. We are using path routing. Default would be
hash based routing. The <code>signInUrl</code> is just the link for the correct singInUrl in yor app. The link at the bottom of the component. The SignIn is basically the same.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/pages/signin/[[...index]].tsx</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">SignIn</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs&#x27;</span>

<span class="token keyword">const</span> <span class="token function-variable function"><span class="token maybe-class-name">SignInPage</span></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">(</span>
  <span class="token operator">&lt;</span>div className<span class="token operator">=</span><span class="token string">&quot;relative my-20 flex justify-center&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token maybe-class-name">SignIn</span> path<span class="token operator">=</span><span class="token string">&quot;/sign-in&quot;</span> routing<span class="token operator">=</span><span class="token string">&quot;path&quot;</span> signUpUrl<span class="token operator">=</span><span class="token string">&quot;/sign-up&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token punctuation">)</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">SignInPage</span>
</code></pre>
<p>In Next.js, the <code>...</code> notation within the file name (specifically <code>[[...index]].tsx</code> in this case) represents a catch-all route. Catch-all routes allow you to match and handle multiple dynamic segments (route parameters) in a single file.</p>
<p>For instance, in the <code>/pages/signin/[[...index]].tsx</code> file, the <code>[[...index]]</code> part means that this file will handle any number of dynamic segments after <code>/signin/</code> in the URL.</p>
<p>Some examples of URL patterns that this catch-all route will match:
<code>/signin</code>,
<code>/signin/user</code>,
<code>/signin/user/123</code>,
<code>/signin/user/123/edit</code>,...</p>
<p>In the <code>[[...index]].tsx</code> file, you can access these dynamic segments using the <code>useRouter</code> hook from the <code>next/router</code> module.</p>
<p>Let&#x27;s continue with the logout functionality. We add a profile button for the logout that looks something like this.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">//src/header/ProfileButton.tsx</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span>
  <span class="token maybe-class-name">DropdownMenu</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">DropdownMenuContent</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">DropdownMenuGroup</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">DropdownMenuItem</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">DropdownMenuLabel</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">DropdownMenuSeparator</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">DropdownMenuTrigger</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@/components/ui/dropdown-menu&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> routes <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@/utils/routes&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> useClerk<span class="token punctuation">,</span> useUser <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">AvatarMarble</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;boring-avatars&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">LifeBuoy</span><span class="token punctuation">,</span> <span class="token maybe-class-name">LogOut</span><span class="token punctuation">,</span> <span class="token maybe-class-name">User</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;lucide-react&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token maybe-class-name">Link</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;next/link&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Avatar</span><span class="token punctuation">,</span> <span class="token maybe-class-name">AvatarFallback</span><span class="token punctuation">,</span> <span class="token maybe-class-name">AvatarImage</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;../ui/avatar&#x27;</span>

<span class="token keyword module">export</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">ProfileButton</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> isSignedIn<span class="token punctuation">,</span> user<span class="token punctuation">,</span> isLoaded <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token comment">// get the signOut function and openSignIn modal function from clerk</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> signOut<span class="token punctuation">,</span> openSignIn <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useClerk</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>isSignedIn <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span><span class="token maybe-class-name">DropdownMenu</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token maybe-class-name">DropdownMenuTrigger</span> asChild<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token string">&quot;relative h-10 w-10 rounded-full&quot;</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>span className<span class="token operator">=</span><span class="token string">&quot;sr-only&quot;</span><span class="token operator">&gt;</span><span class="token maybe-class-name">Open</span> user menu<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span><span class="token maybe-class-name">Avatar</span><span class="token operator">&gt;</span>
                <span class="token punctuation">{</span>user<span class="token operator">?.</span>profileImageUrl<span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span><span class="token string">&#x27;gravatar&#x27;</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span>
                  <span class="token operator">&lt;</span><span class="token maybe-class-name">AvatarFallback</span><span class="token operator">&gt;</span>
                    <span class="token operator">&lt;</span><span class="token maybe-class-name">AvatarMarble</span>
                      size<span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">34</span><span class="token punctuation">}</span>
                      name<span class="token operator">=</span><span class="token string">&quot;Maria Mitchell&quot;</span>
                      variant<span class="token operator">=</span><span class="token string">&quot;marble&quot;</span>
                      colors<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span><span class="token string">&#x27;#2E9E94&#x27;</span><span class="token punctuation">,</span> <span class="token string">&#x27;#2E709E&#x27;</span><span class="token punctuation">,</span> <span class="token string">&#x27;#3AC5B9&#x27;</span><span class="token punctuation">,</span> <span class="token string">&#x27;#A1A1AA&#x27;</span><span class="token punctuation">]</span><span class="token punctuation">}</span>
                    <span class="token operator">/</span><span class="token operator">&gt;</span>
                  <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">AvatarFallback</span><span class="token operator">&gt;</span>
                <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
                  <span class="token operator">&lt;</span><span class="token maybe-class-name">AvatarImage</span>
                    src<span class="token operator">=</span><span class="token punctuation">{</span>user<span class="token operator">?.</span>profileImageUrl<span class="token punctuation">}</span>
                    alt<span class="token operator">=</span><span class="token punctuation">{</span>user<span class="token operator">?.</span>username <span class="token operator">??</span> <span class="token string">&#x27;username&#x27;</span><span class="token punctuation">}</span>
                  <span class="token operator">/</span><span class="token operator">&gt;</span>
                <span class="token punctuation">)</span><span class="token punctuation">}</span>
              <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">Avatar</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">DropdownMenuTrigger</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token maybe-class-name">DropdownMenuContent</span> className<span class="token operator">=</span><span class="token string">&quot;w-56&quot;</span> align<span class="token operator">=</span><span class="token string">&quot;end&quot;</span> forceMount<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token maybe-class-name">DropdownMenuLabel</span><span class="token operator">&gt;</span><span class="token maybe-class-name">My</span> <span class="token maybe-class-name">Account</span><span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">DropdownMenuLabel</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token maybe-class-name">DropdownMenuSeparator</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token maybe-class-name">DropdownMenuGroup</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span><span class="token maybe-class-name">Link</span> href<span class="token operator">=</span><span class="token punctuation">{</span>routes<span class="token punctuation">.</span><span class="token property-access">protected</span><span class="token punctuation">.</span><span class="token property-access">profile</span><span class="token punctuation">.</span><span class="token property-access">add</span><span class="token punctuation">.</span><span class="token property-access">path</span><span class="token punctuation">}</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token maybe-class-name">DropdownMenuItem</span> className<span class="token operator">=</span><span class="token string">&quot;cursor-pointer&quot;</span><span class="token operator">&gt;</span>
                  <span class="token operator">&lt;</span><span class="token maybe-class-name">User</span> className<span class="token operator">=</span><span class="token string">&quot;mr-2 h-4 w-4&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                  <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token punctuation">{</span>routes<span class="token punctuation">.</span><span class="token property-access">protected</span><span class="token punctuation">.</span><span class="token property-access">profile</span><span class="token punctuation">.</span><span class="token property-access">add</span><span class="token punctuation">.</span><span class="token property-access">label</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">DropdownMenuItem</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">Link</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">mailto:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>routes<span class="token punctuation">.</span><span class="token property-access">contacts</span><span class="token punctuation">.</span><span class="token property-access">email</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span> target<span class="token operator">=</span><span class="token string">&quot;_blank&quot;</span><span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token maybe-class-name">DropdownMenuItem</span> className<span class="token operator">=</span><span class="token string">&quot;cursor-pointer&quot;</span><span class="token operator">&gt;</span>
                  <span class="token operator">&lt;</span><span class="token maybe-class-name">LifeBuoy</span> className<span class="token operator">=</span><span class="token string">&quot;mr-2 h-4 w-4&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
                  <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token maybe-class-name">Support</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
                <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">DropdownMenuItem</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">DropdownMenuGroup</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token maybe-class-name">DropdownMenuSeparator</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
            <span class="token comment">// add the signOut function to the dropdown menu</span>
            <span class="token operator">&lt;</span><span class="token maybe-class-name">DropdownMenuItem</span>
              onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token function">signOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
              className<span class="token operator">=</span><span class="token string">&quot;cursor-pointer&quot;</span>
            <span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span><span class="token maybe-class-name">LogOut</span> className<span class="token operator">=</span><span class="token string">&quot;mr-2 h-4 w-4&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
              <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span><span class="token maybe-class-name">Log</span> out<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">DropdownMenuItem</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">DropdownMenuContent</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">DropdownMenu</span><span class="token operator">&gt;</span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
          <span class="token comment">// if the user is not signed in open the signIn modal</span>
          <span class="token operator">&lt;</span>button
            className<span class="token operator">=</span><span class="token string">&quot;relative text-sm font-semibold leading-6 text-zinc-800 hover:text-teal-500 dark:divide-zinc-100/5 dark:text-zinc-300 dark:hover:text-teal-400&quot;</span>
            onClick<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token function">openSignIn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span>
          <span class="token operator">&gt;</span>
            <span class="token maybe-class-name">Log</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>span aria<span class="token operator">-</span>hidden<span class="token operator">=</span><span class="token string">&quot;true&quot;</span><span class="token operator">&gt;</span><span class="token operator">&amp;</span>rarr<span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>The next step is to let the app in the frontend check to what routes the unauthenticated user has access and for witch routes a user must be signed in. There are two possible solutions.
The first solution is you can check in the <code>_app.tsx</code> if the user is signed in and if the page is public or not. This is recommended if you&#x27;re not using nexts <code>/pages/api</code> routes as a backend.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/pages/_app.ts</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span>
  <span class="token maybe-class-name">ClerkProvider</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">SignedIn</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">SignedOut</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">RedirectToSignIn</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;next/router&#x27;</span>

<span class="token comment">//  List pages you want to be publicly accessible, or leave empty if</span>
<span class="token comment">//  every page requires authentication. Use this naming strategy:</span>
<span class="token comment">//   &quot;/&quot;              for pages/index.js</span>
<span class="token comment">//   &quot;/foo&quot;           for pages/foo/index.js</span>
<span class="token comment">//   &quot;/foo*&quot;          for all the pages inside /foo</span>

<span class="token keyword">const</span> publicPages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyApp</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token maybe-class-name">Component</span><span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Get the pathname</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Check if the current route matches a public page</span>
  <span class="token keyword">const</span> isPublicPage <span class="token operator">=</span> publicPages<span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span>

  <span class="token comment">// If the current route is listed as public, render it directly</span>
  <span class="token comment">// Otherwise, use Clerk to require authentication</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token maybe-class-name">ClerkProvider</span>
      appearance<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
        variables<span class="token operator">:</span> <span class="token punctuation">{</span> colorPrimary<span class="token operator">:</span> <span class="token string">&#x27;#27272A&#x27;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        elements<span class="token operator">:</span> <span class="token punctuation">{</span>
          formFieldInput<span class="token operator">:</span> <span class="token string">&#x27;rounded-md border border-zinc-900/10 bg-white&#x27;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span>
    <span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>isPublicPage <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span><span class="token maybe-class-name">Component</span> <span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token maybe-class-name">SignedIn</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token maybe-class-name">Component</span> <span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">SignedIn</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token maybe-class-name">SignedOut</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token maybe-class-name">RedirectToSignIn</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">SignedOut</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">ClerkProvider</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">MyApp</span>
</code></pre>
<h2>4. Add middleware to use auth in trpc</h2>
<p>If youre like me and you&#x27;re using trpc, it&#x27;s easier to just add a middleware and check if a requested route is public or not.
Also I changed from checking for public routes to private routes as I have only two private routes.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/middleware.ts</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> getAuth<span class="token punctuation">,</span> withClerkMiddleware <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs/server&#x27;</span>
<span class="token keyword module">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> <span class="token maybe-class-name">NextRequest</span> <span class="token punctuation">}</span> <span class="token keyword module">from</span> <span class="token string">&#x27;next/server&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">NextResponse</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;next/server&#x27;</span>

<span class="token comment">// Set the paths that require the user to be signed in</span>
<span class="token comment">// get the values of the path property from the routes object of all the protected routes</span>
<span class="token keyword">const</span> privatePaths <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">values</span><span class="token punctuation">(</span>routes<span class="token punctuation">.</span><span class="token property-access">protected</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> obj<span class="token punctuation">.</span><span class="token property-access">add</span><span class="token punctuation">.</span><span class="token property-access">path</span><span class="token punctuation">)</span>
<span class="token comment">// Ends up in this place as `[&#x27;/dashboard/add, &#x27;/flashcards/add&#x27;]`</span>
<span class="token comment">// if you want to white/blacklist a route with all it&#x27;s children use `*` as a wildcard eg. `/dashboard*`</span>
<span class="token comment">// no / before the *.</span>
<span class="token keyword">const</span> <span class="token function-variable function">isPrivate</span> <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> privatePaths<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span>
    path<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token known-class-name class-name">RegExp</span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">^</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">$</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token string">&#x27;*$&#x27;</span><span class="token punctuation">,</span> <span class="token string">&#x27;($|/)&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token function">withClerkMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token operator">:</span> <span class="token maybe-class-name">NextRequest</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPrivate</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token property-access">nextUrl</span><span class="token punctuation">.</span><span class="token property-access">pathname</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token maybe-class-name">NextResponse</span><span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// if the user is not signed in redirect them to the sign in page.</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> userId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getAuth</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>

  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// redirect the users to /pages/sign-in/[[...index]].ts</span>

    <span class="token keyword">const</span> signInUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&#x27;/sign-in&#x27;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token property-access">url</span><span class="token punctuation">)</span>
    signInUrl<span class="token punctuation">.</span><span class="token property-access">searchParams</span><span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token string">&#x27;redirect_url&#x27;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token property-access">url</span><span class="token punctuation">)</span>
    <span class="token keyword control-flow">return</span> <span class="token maybe-class-name">NextResponse</span><span class="token punctuation">.</span><span class="token method function property-access">redirect</span><span class="token punctuation">(</span>signInUrl<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword control-flow">return</span> <span class="token maybe-class-name">NextResponse</span><span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// Stop Middleware running on static files</span>
<span class="token keyword module">export</span> <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  matcher<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">/*
     * Match all request paths except for the ones starting with:
     * - _next
     * - static (static filespath)
     * - favicon.ico (favicon file)
     * - image (image files)
     */</span>
    <span class="token string">&#x27;/(.*?trpc.*?|(?!static|.*\\..*|_next?|image|favicon.ico).*)&#x27;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>5. Add auth to trpc context</h2>
<p>Now that you have the middleware checking the routes that should be protected, we can continue with adding protection to our trpc handlers.
Let&#x27;s add auth to our context so we can easily access it in our endpoints.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/server/context.ts</span>
<span class="token keyword module">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span>
  <span class="token maybe-class-name">SignedInAuthObject</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">SignedOutAuthObject</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs/dist/api&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> getAuth <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs/server&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> trpc</span> <span class="token keyword module">from</span> <span class="token string">&#x27;@trpc/server&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> trpcNext</span> <span class="token keyword module">from</span> <span class="token string">&#x27;@trpc/server/adapters/next&#x27;</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token maybe-class-name">AuthContext</span></span> <span class="token punctuation">{</span>
  auth<span class="token operator">:</span> <span class="token maybe-class-name">SignedInAuthObject</span> <span class="token operator">|</span> <span class="token maybe-class-name">SignedOutAuthObject</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Inner function for `createContext` where we create the context.
 * This is useful for testing when we don&#x27;t want to mock Next.js&#x27; request/response
 */</span>
<span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createContextInner</span><span class="token punctuation">(</span><span class="token punctuation">{</span> auth <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">AuthContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span> auth <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Context</span></span> <span class="token operator">=</span> trpc<span class="token punctuation">.</span><span class="token property-access">inferAsyncReturnType</span><span class="token operator">&lt;</span><span class="token keyword">typeof</span> createContextInner<span class="token operator">&gt;</span>

<span class="token doc-comment comment">/**
 * Creates context for an incoming request
 * <span class="token keyword">@link</span> https://trpc.io/docs/context
 */</span>
<span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createContext</span><span class="token punctuation">(</span>
  opts<span class="token operator">:</span> trpcNext<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">CreateNextContextOptions</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token known-class-name class-name">Promise</span><span class="token operator">&lt;</span><span class="token maybe-class-name">Context</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// for API-response caching see https://trpc.io/docs/caching</span>

  <span class="token keyword control-flow">return</span> <span class="token keyword control-flow">await</span> <span class="token function">createContextInner</span><span class="token punctuation">(</span><span class="token punctuation">{</span> auth<span class="token operator">:</span> <span class="token function">getAuth</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span><span class="token property-access">req</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As we have now access to our context, we can add add middleware to our trpc endpoints. Here we will check if the user is signed in and if not we will throw an error.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/server/trpc.ts</span>
<span class="token comment">// check if the user is signed in, otherwise through a UNAUTHORIZED CODE</span>
<span class="token keyword">const</span> isAuthed <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token method function property-access">middleware</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> next<span class="token punctuation">,</span> ctx <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span><span class="token property-access">auth</span><span class="token punctuation">.</span><span class="token property-access">userId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token known-class-name class-name">TRPCError</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> code<span class="token operator">:</span> <span class="token string">&#x27;UNAUTHORIZED&#x27;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword control-flow">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    ctx<span class="token operator">:</span> <span class="token punctuation">{</span>
      auth<span class="token operator">:</span> ctx<span class="token punctuation">.</span><span class="token property-access">auth</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> protectedProcedure <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token property-access">procedure</span><span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>isAuthed<span class="token punctuation">)</span>
</code></pre>
<h2>6. Protect our routers/procedures with auth/authorization</h2>
<p>What this allows us is to just use the new added middleware/procedure in our endpoint. Meaning only a logged in user can write a message to the guestbook.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/server/routers/guestbook.ts</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> z <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;zod&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> prisma <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;../prisma&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span>
  adminProcedure<span class="token punctuation">,</span>
  protectedProcedure<span class="token punctuation">,</span>
  publicProcedure<span class="token punctuation">,</span>
  router<span class="token punctuation">,</span>
<span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;../trpc&#x27;</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> guestbookRouter <span class="token operator">=</span> <span class="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  list<span class="token operator">:</span> publicProcedure<span class="token punctuation">.</span><span class="token method function property-access">query</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * For pagination docs you can have a look here
     * <span class="token keyword">@see</span> https://trpc.io/docs/useInfiniteQuery
     * <span class="token keyword">@see</span> https://www.prisma.io/docs/concepts/components/prisma-client/pagination
     */</span>

    <span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token keyword control-flow">await</span> prisma<span class="token punctuation">.</span><span class="token property-access">guestbook</span><span class="token punctuation">.</span><span class="token method function property-access">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      include<span class="token operator">:</span> <span class="token punctuation">{</span> user<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      orderBy<span class="token operator">:</span> <span class="token punctuation">{</span>
        createdAt<span class="token operator">:</span> <span class="token string">&#x27;desc&#x27;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
      messages<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  deleteAll<span class="token operator">:</span> adminProcedure<span class="token punctuation">.</span><span class="token method function property-access">mutation</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token keyword control-flow">await</span> prisma<span class="token punctuation">.</span><span class="token property-access">guestbook</span><span class="token punctuation">.</span><span class="token method function property-access">deleteMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;messagesDEL&#x27;</span><span class="token punctuation">,</span> messages<span class="token punctuation">)</span>
    <span class="token keyword control-flow">return</span> messages
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  add<span class="token operator">:</span> protectedProcedure
    <span class="token punctuation">.</span><span class="token method function property-access">input</span><span class="token punctuation">(</span>
      z<span class="token punctuation">.</span><span class="token method function property-access">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        message<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token method function property-access">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">min</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">mutation</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> input<span class="token punctuation">,</span> ctx <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;ctx&#x27;</span><span class="token punctuation">,</span> ctx<span class="token punctuation">.</span><span class="token property-access">auth</span><span class="token punctuation">)</span>
      <span class="token keyword">const</span> newInput <span class="token operator">=</span> <span class="token punctuation">{</span>
        userId<span class="token operator">:</span> ctx<span class="token punctuation">.</span><span class="token property-access">auth</span><span class="token punctuation">.</span><span class="token property-access">userId</span><span class="token punctuation">,</span>
        message<span class="token operator">:</span> input<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token keyword control-flow">await</span> prisma<span class="token punctuation">.</span><span class="token property-access">guestbook</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        data<span class="token operator">:</span> newInput<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword control-flow">return</span> message
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<h2>7. Add a webhook to keep our database in sync</h2>
<p>Now we have kind of a working authentication system running. For convenience reasons we will add two things. First, add a webhook to keep clerk and our database in sync.
Webhooks are how services notify each other of events. Basically just ah <code>POST</code> request with some payload that goes to an pre-determined endpoint.
Second update the JWT and session claims to add fields to our auth/session tokens.</p>
<p>For adding a webhook go to the Clark dashboard and click on the <code>Webhooks</code> link. Add a new webhook and select the <code>User Signed In</code> event.
Then add the url to our backend. In our case it is <code>https://api.yourdomain.com/api/webhooks/clerk/user-signed-in</code>.</p>
<p>Because webhooks can be easily missused we add a library caled svix for verifying the webhook. You can read more on their <a href="https://docs.svix.com/">documentation</a>.
For local debugging I also recommend to install their <a href="https://docs.svix.com/tutorials/cli">CLI</a>.</p>
<p>First we need to add the endpoint to our api routes. Basically create the file <code>src/pages/api/webhooks/updateUser.ts</code> and then go to the Clerk dashbaord. Look for the Webhooks section and click <code>Add Endpoint</code>. The endpoint is our api route <code>http://ourDomain.com/api/webhook/updateUser</code>.
Give it a description if you want and add the message event filters you want. In my case I only care about the user events. Then click <code>create</code>. This will create a webhook that sends data to our endpoint everytime something changes in clerks database.
In our case it filters out only the events of the user <code>user.created</code>, <code>user.deleted</code>, <code>user.updated</code>.</p>
<img alt="clerk update user webhook" loading="lazy" width="1030" height="864" decoding="async" data-nimg="1" style="color:transparent" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fwebhook.320d3414.png&amp;w=1080&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fwebhook.320d3414.png&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fwebhook.320d3414.png&amp;w=3840&amp;q=75"/>
<p>The part on the clerk side is done. Now we need to add the webhook to our backend. First we need to add the svix and micro library to our project.</p>
<pre class="language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> svix micro
</code></pre>
<p>Now let&#x27;s write the handler.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">//src/pages/api/webhooks/updateUser.ts</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> prisma <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@/server/prisma&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> buffer <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;micro&#x27;</span>

<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">Webhook</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;svix&#x27;</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  api<span class="token operator">:</span> <span class="token punctuation">{</span>
    bodyParser<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token comment">// clerk secret from the webhook above</span>
<span class="token keyword">const</span> secret <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token property-access">env</span><span class="token punctuation">.</span><span class="token constant">CLERK_WEBHOOK_SECRET</span> <span class="token operator">??</span> <span class="token string">&#x27;&#x27;</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">handler</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">//collect the stream and parse it to a string</span>
  <span class="token keyword">const</span> payload <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword control-flow">await</span> <span class="token function">buffer</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> headers <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token property-access">headers</span>
  <span class="token comment">// create a new webhook instance</span>
  <span class="token keyword">const</span> wh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token maybe-class-name">Webhook</span></span><span class="token punctuation">(</span>secret<span class="token punctuation">)</span>
  <span class="token keyword">let</span> msg
  <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// verify the webhook and get the message</span>
    msg <span class="token operator">=</span> wh<span class="token punctuation">.</span><span class="token method function property-access">verify</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span> headers<span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> res<span class="token punctuation">.</span><span class="token method function property-access">status</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> id<span class="token punctuation">,</span> username<span class="token punctuation">,</span> profile_image_url<span class="token operator">:</span> profileImageUrl <span class="token punctuation">}</span> <span class="token operator">=</span> msg<span class="token punctuation">.</span><span class="token property-access">data</span>

  <span class="token keyword">const</span> shouldIgnoreGravatar <span class="token operator">=</span> profileImageUrl<span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span><span class="token string">&#x27;gravatar&#x27;</span><span class="token punctuation">)</span>
  <span class="token comment">// I don&#x27;t want to use the gravatar image so I set it to null</span>
  <span class="token keyword">const</span> sanitizedProfileImageUrl <span class="token operator">=</span> shouldIgnoreGravatar <span class="token operator">?</span> <span class="token keyword null nil">null</span> <span class="token operator">:</span> profileImageUrl

  <span class="token keyword control-flow">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// delete case  (also deletes all the guestbook entries as it cascades)</span>
    <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">deleted</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword control-flow">await</span> prisma<span class="token punctuation">.</span><span class="token property-access">user</span><span class="token punctuation">.</span><span class="token method function property-access">delete</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        where<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> msg<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">id</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// update create case</span>
    <span class="token keyword control-flow">await</span> prisma<span class="token punctuation">.</span><span class="token property-access">user</span><span class="token punctuation">.</span><span class="token method function property-access">upsert</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      where<span class="token operator">:</span> <span class="token punctuation">{</span> id<span class="token operator">:</span> msg<span class="token punctuation">.</span><span class="token property-access">data</span><span class="token punctuation">.</span><span class="token property-access">id</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      update<span class="token operator">:</span> <span class="token punctuation">{</span>
        username<span class="token punctuation">,</span>
        profileImageUrl<span class="token operator">:</span> sanitizedProfileImageUrl<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
      create<span class="token operator">:</span> <span class="token punctuation">{</span>
        id<span class="token punctuation">,</span>
        username<span class="token punctuation">,</span>
        profileImageUrl<span class="token operator">:</span> sanitizedProfileImageUrl<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token method function property-access">status</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span> <span class="token keyword control-flow">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>
    res<span class="token punctuation">.</span><span class="token method function property-access">status</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token property-access">requestResult</span><span class="token punctuation">.</span><span class="token property-access">statusCode</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">send</span><span class="token punctuation">(</span>error<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now everytime a user is created, updated or deleted in clerk it will also be updated in our database.</p>
<h2>8. Update the JWT and session claims</h2>
<p>Second thing is we will update the JWT token details to include not only the <code>userId</code> but in our case also the <code>email</code>, <code>firstName</code>, <code>lastName</code> and <code>web3Wallets</code>.
These are called claims. You also can add such claims for other third party services like stripe or github if you want to interact with those.
Just go to our clerk dashboard and click on the <code>JWT Templates</code> link. Add the details as in the image or read up on the stuff in the right bottom corner.</p>
<img alt="clerk custom jwt" loading="lazy" width="1397" height="891" decoding="async" data-nimg="1" style="color:transparent" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fjwt.63531906.png&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fjwt.63531906.png&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fjwt.63531906.png&amp;w=3840&amp;q=75"/>
<p>Now the email, firstName,... are added to our JWT. And can be easily accessed via our <code>useUser</code> hook.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> useUser <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs&#x27;</span>
<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Index</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLoaded<span class="token punctuation">,</span> isSignedIn<span class="token punctuation">,</span> user <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;user&#x27;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span>
  <span class="token comment">//todo manuel add the return of the user</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Same for the backend. You need to update the session to include the claims and can access them with the <code>getAuth</code> function or via the context.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword">const</span> ctx <span class="token operator">=</span> <span class="token punctuation">{</span>
  actor<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
  sessionClaims<span class="token operator">:</span> <span class="token punctuation">{</span>
    azp<span class="token operator">:</span> <span class="token string">&#x27;http://localhost:3000&#x27;</span><span class="token punctuation">,</span>
    email<span class="token operator">:</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span>
    exp<span class="token operator">:</span> <span class="token number">1678276727</span><span class="token punctuation">,</span>
    firstName<span class="token operator">:</span> <span class="token string">&#x27;Clark&#x27;</span><span class="token punctuation">,</span>
    iat<span class="token operator">:</span> <span class="token number">1678276667</span><span class="token punctuation">,</span>
    iss<span class="token operator">:</span> <span class="token string">&#x27;https://vast-ostrich-16.clerk.accounts.dev&#x27;</span><span class="token punctuation">,</span>
    jti<span class="token operator">:</span> <span class="token string">&#x27;fe8915affaa83af9d10e&#x27;</span><span class="token punctuation">,</span>
    lastName<span class="token operator">:</span> <span class="token string">&#x27;Kent&#x27;</span><span class="token punctuation">,</span>
    nbf<span class="token operator">:</span> <span class="token number">1678276657</span><span class="token punctuation">,</span>
    sid<span class="token operator">:</span> <span class="token string">&#x27;sess_2MjB3LIcLMDC464laFoIkrRZiTu&#x27;</span><span class="token punctuation">,</span>
    sub<span class="token operator">:</span> <span class="token string">&#x27;user_2Mj8pdXGjEPXYNNBXPI1gXDjxT3&#x27;</span><span class="token punctuation">,</span>
    userId<span class="token operator">:</span> <span class="token string">&#x27;user_2Mj8pdXGjEPXYNNBXPI1gXDjxT3&#x27;</span><span class="token punctuation">,</span>
    web3Wallets<span class="token operator">:</span> <span class="token string">&#x27;{{user.web3Wallets}}&#x27;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  sessionId<span class="token operator">:</span> <span class="token string">&#x27;sess_2MjB3LIcLMDC464laFoIkrRZiTu&#x27;</span><span class="token punctuation">,</span>
  session<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
  userId<span class="token operator">:</span> <span class="token string">&#x27;user_2Mj8pdXGjEPXYNNBXPI1gXDjxT3&#x27;</span><span class="token punctuation">,</span>
  user<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
  orgId<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
  orgRole<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
  orgSlug<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
  organization<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
  getToken<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function"><span class="token maybe-class-name">AsyncFunction</span></span><span class="token punctuation">(</span>anonymous<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  debug<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token known-class-name class-name">Function</span><span class="token punctuation">(</span>anosymous<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre>
<h2>9. Add the Social Connection Provider - Google</h2>
<p>In order to go to production with our choosen social sign in method of google we need to add the google provider to our clerk dashboard.
It&#x27;s to get rid of this url in the sign in process.</p>
<img alt="social signin google" loading="lazy" width="518" height="611" decoding="async" data-nimg="1" style="color:transparent" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fsignin.37bc74e5.png&amp;w=640&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fsignin.37bc74e5.png&amp;w=1080&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fsignin.37bc74e5.png&amp;w=1080&amp;q=75"/>
<p>I am not going to go threw the steps as it depends on the social login solutions you want to use. Just got to Clerks <a href="https://clerk.com/docs/authentication/social-connections-oauth">documentation</a> and follow the steps.</p>
<h2>10. Yeahhh we did it! We did it! ðŸŽ‰</h2>
<p>If you have any questions feel free to contact me! I am happy to help.</p>]]></content:encoded>
            <author>bichler@gmail.com (Manuel Bichler)</author>
        </item>
    </channel>
</rss>