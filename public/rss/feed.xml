<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Manuel Bichler</title>
        <link>http://localhost:3000</link>
        <description>Your blog description</description>
        <lastBuildDate>Wed, 08 Mar 2023 13:31:49 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <image>
            <title>Manuel Bichler</title>
            <url>http://localhost:3000/favicon.ico</url>
            <link>http://localhost:3000</link>
        </image>
        <copyright>All rights reserved 2023</copyright>
        <item>
            <title><![CDATA[Authentication in Next.js with Clerk.dev and trcp.io]]></title>
            <link>http://localhost:3000/articles/auth-clerk-nextjs</link>
            <guid>http://localhost:3000/articles/auth-clerk-nextjs</guid>
            <pubDate>Sun, 05 Mar 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Painless Next.js authentication. With Clerk.dev and trcp.io, we can now build a secure authentication system in a day.]]></description>
            <content:encoded><![CDATA[<p>When I started out as a dev, authentication always felt a little bit intimidating. So many new concepts to learn, so many new libraries to install, so many new things to configure. And there is the angst of implementing an unsecure system. Just to finally end up with a system that allows users to login. It was a pain.</p>
<p>Don&#x27;t get me wrong, struggling is good. It&#x27;s how we learn. And there is definitely a benefit if you&#x27;ve implemented authentication a couple of times from scratch.
But roling your own authentication comes with a downside. You have to maintain it. And if you&#x27;re like me, you&#x27;ll probably have more interesting problems to solve then keeping your authentication system up to date.
So as I said, if you&#x27;re interested how stuff works, do it yourself. But trust me, it will become a pain in the ass, especially if you&#x27;re working on more projects.
Anyway, let&#x27;s dive in. By the way, all the code can be found <a href="https://github.com/Manubi/manuelbichler">here</a>. It&#x27;s this page.</p>
<h2>Tech stack</h2>
<ul>
<li>Next.js</li>
<li>trcp.io</li>
<li>Clerk.dev</li>
</ul>
<h2>Setting things up</h2>
<p>Im not gonna write about setting up Next.js nor trcp. This is only about adding authentication with Clerk.dev.
The basic workflow is.</p>
<ol>
<li>Register at Clerk.dev and install <code>npm i @clerk/nextjs</code></li>
<li>Add AuthProvider with public and protected pages</li>
<li>Add Sign-in and Sign-out buttons/components</li>
<li>Add middleware to use auth in trcp</li>
<li>Add add auth to trpc</li>
<li>Protect your routers/procedures with auth</li>
<li>Add another field to JWT token</li>
<li>Add a webhook to update your database when user details change</li>
<li>Time to be &#x27;Happy, peppy and cheerful&#x27; ðŸŽ‰</li>
</ol>
<h2>1. Register at Clerk.dev and install package</h2>
<p>Go to Clerk.dev/register, install the package <code>npm i @clerk/nextjs</code> and copy your api keys in your <code>.env.local</code> file.</p>
<h2>2. Add AuthProvider with public and protected routes</h2>
<p>As with almost everything in React that you&#x27;ll need in your whole app, needs to be a context provider.
It&#x27;s basically your parent giving information to all children which are your Components. First I&#x27;ll give you the basic version of the <code>_app.tsx</code>. The second version will be a little more realistic.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/pages/_app.tsx</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">ClerkProvider</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs&#x27;</span>
<span class="token keyword module">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> <span class="token maybe-class-name">AppProps</span> <span class="token punctuation">}</span> <span class="token keyword module">from</span> <span class="token string">&#x27;next/app&#x27;</span>

<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyApp</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token maybe-class-name">Component</span><span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">AppProps</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token maybe-class-name">ClerkProvider</span> <span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span><span class="token operator">&gt;</span>
      <span class="token operator">&lt;</span><span class="token maybe-class-name">Component</span> <span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">ClerkProvider</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">MyApp</span>
</code></pre>
<p>This gives you access to the Clerk context in all your components. But you still need to add the sign-in and sign-out buttons/pages. And you need to tell Clerk which pages are public and which are protected. For this you have two possibilities.
The first one is the following, where you check in your <code>_app</code> Component if the page is public or not. This is recommended if you&#x27;re not using nexts <code>/pages/api</code> routes as a backend.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/pages/_app.ts</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span>
  <span class="token maybe-class-name">ClerkProvider</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">SignedIn</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">SignedOut</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">RedirectToSignIn</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> useRouter <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;next/router&#x27;</span>

<span class="token comment">//  List pages you want to be publicly accessible, or leave empty if</span>
<span class="token comment">//  every page requires authentication. Use this naming strategy:</span>
<span class="token comment">//   &quot;/&quot;              for pages/index.js</span>
<span class="token comment">//   &quot;/foo&quot;           for pages/foo/index.js</span>
<span class="token comment">//   &quot;/foo*&quot;          for all the pages inside /foo</span>

<span class="token keyword">const</span> publicPages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

<span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">MyApp</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token maybe-class-name">Component</span><span class="token punctuation">,</span> pageProps <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Get the pathname</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> pathname <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useRouter</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

  <span class="token comment">// Check if the current route matches a public page</span>
  <span class="token keyword">const</span> isPublicPage <span class="token operator">=</span> publicPages<span class="token punctuation">.</span><span class="token method function property-access">includes</span><span class="token punctuation">(</span>pathname<span class="token punctuation">)</span>

  <span class="token comment">// If the current route is listed as public, render it directly</span>
  <span class="token comment">// Otherwise, use Clerk to require authentication</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">(</span>
    <span class="token operator">&lt;</span><span class="token maybe-class-name">ClerkProvider</span>
      appearance<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span>
        variables<span class="token operator">:</span> <span class="token punctuation">{</span> colorPrimary<span class="token operator">:</span> <span class="token string">&#x27;#27272A&#x27;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        elements<span class="token operator">:</span> <span class="token punctuation">{</span>
          formFieldInput<span class="token operator">:</span> <span class="token string">&#x27;rounded-md border border-zinc-900/10 bg-white&#x27;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">}</span>
      <span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span>
    <span class="token operator">&gt;</span>
      <span class="token punctuation">{</span>isPublicPage <span class="token operator">?</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span><span class="token maybe-class-name">Component</span> <span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>
        <span class="token operator">&lt;</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token maybe-class-name">SignedIn</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token maybe-class-name">Component</span> <span class="token punctuation">{</span><span class="token spread operator">...</span>pageProps<span class="token punctuation">}</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">SignedIn</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token maybe-class-name">SignedOut</span><span class="token operator">&gt;</span>
            <span class="token operator">&lt;</span><span class="token maybe-class-name">RedirectToSignIn</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
          <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">SignedOut</span><span class="token operator">&gt;</span>
        <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
      <span class="token punctuation">)</span><span class="token punctuation">}</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span><span class="token maybe-class-name">ClerkProvider</span><span class="token operator">&gt;</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token maybe-class-name">MyApp</span>
</code></pre>
<p>If youre like me and you&#x27;re using trpc, it&#x27;s easier to just add a middleware and check if a requested route is public or not.
Also I changed from checking for public routes to private routes as I have only two private routes.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/middleware.ts</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> getAuth<span class="token punctuation">,</span> withClerkMiddleware <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs/server&#x27;</span>
<span class="token keyword module">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span> <span class="token maybe-class-name">NextRequest</span> <span class="token punctuation">}</span> <span class="token keyword module">from</span> <span class="token string">&#x27;next/server&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> <span class="token maybe-class-name">NextResponse</span> <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;next/server&#x27;</span>

<span class="token comment">// Set the paths that require the user to be signed in</span>
<span class="token comment">// get the values of the path property from the routes object of all the protected routes</span>
<span class="token keyword">const</span> privatePaths <span class="token operator">=</span> <span class="token known-class-name class-name">Object</span><span class="token punctuation">.</span><span class="token method function property-access">values</span><span class="token punctuation">(</span>routes<span class="token punctuation">.</span><span class="token property-access">protected</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> obj<span class="token punctuation">.</span><span class="token property-access">add</span><span class="token punctuation">.</span><span class="token property-access">path</span><span class="token punctuation">)</span>
<span class="token comment">// Ends up in this place as `[&#x27;/dashboard/add, &#x27;/flashcards/add&#x27;]`</span>
<span class="token comment">// if you want to white/blacklist a route with all it&#x27;s children use `*` as a wildcard eg. `/dashboard*`</span>
<span class="token comment">// no / before the *.</span>
<span class="token keyword">const</span> <span class="token function-variable function">isPrivate</span> <span class="token operator">=</span> <span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> privatePaths<span class="token punctuation">.</span><span class="token method function property-access">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span>
    path<span class="token punctuation">.</span><span class="token method function property-access">match</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name"><span class="token known-class-name class-name">RegExp</span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">^</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>x<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">$</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">.</span><span class="token method function property-access">replace</span><span class="token punctuation">(</span><span class="token string">&#x27;*$&#x27;</span><span class="token punctuation">,</span> <span class="token string">&#x27;($|/)&#x27;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token function">withClerkMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token operator">:</span> <span class="token maybe-class-name">NextRequest</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isPrivate</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token property-access">nextUrl</span><span class="token punctuation">.</span><span class="token property-access">pathname</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">return</span> <span class="token maybe-class-name">NextResponse</span><span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token comment">// if the user is not signed in redirect them to the sign in page.</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> userId <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">getAuth</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>

  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// redirect the users to /pages/sign-in/[[...index]].ts</span>

    <span class="token keyword">const</span> signInUrl <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token constant">URL</span></span><span class="token punctuation">(</span><span class="token string">&#x27;/sign-in&#x27;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token property-access">url</span><span class="token punctuation">)</span>
    signInUrl<span class="token punctuation">.</span><span class="token property-access">searchParams</span><span class="token punctuation">.</span><span class="token method function property-access">set</span><span class="token punctuation">(</span><span class="token string">&#x27;redirect_url&#x27;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token property-access">url</span><span class="token punctuation">)</span>
    <span class="token keyword control-flow">return</span> <span class="token maybe-class-name">NextResponse</span><span class="token punctuation">.</span><span class="token method function property-access">redirect</span><span class="token punctuation">(</span>signInUrl<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword control-flow">return</span> <span class="token maybe-class-name">NextResponse</span><span class="token punctuation">.</span><span class="token method function property-access">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">// Stop Middleware running on static files</span>
<span class="token keyword module">export</span> <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>
  matcher<span class="token operator">:</span> <span class="token punctuation">[</span>
    <span class="token comment">/*
     * Match all request paths except for the ones starting with:
     * - _next
     * - static (static files)
     * - favicon.ico (favicon file)
     * - image (image files)
     */</span>
    <span class="token string">&#x27;/(.*?trpc.*?|(?!static|.*\\..*|_next?|image|favicon.ico).*)&#x27;</span><span class="token punctuation">,</span>
  <span class="token punctuation">]</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Now that you have the middleware checking the routes that should be protected, we can continue with adding protection to our trcp handlers.
Let&#x27;s add auth to our context so we can easily access it in our endpoints.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/server/context.ts</span>
<span class="token keyword module">import</span> <span class="token keyword">type</span> <span class="token punctuation">{</span>
  <span class="token maybe-class-name">SignedInAuthObject</span><span class="token punctuation">,</span>
  <span class="token maybe-class-name">SignedOutAuthObject</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs/dist/api&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> getAuth <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs/server&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> trpc</span> <span class="token keyword module">from</span> <span class="token string">&#x27;@trpc/server&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token operator">*</span> <span class="token keyword module">as</span> trpcNext</span> <span class="token keyword module">from</span> <span class="token string">&#x27;@trpc/server/adapters/next&#x27;</span>

<span class="token keyword">interface</span> <span class="token class-name"><span class="token maybe-class-name">AuthContext</span></span> <span class="token punctuation">{</span>
  auth<span class="token operator">:</span> <span class="token maybe-class-name">SignedInAuthObject</span> <span class="token operator">|</span> <span class="token maybe-class-name">SignedOutAuthObject</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Inner function for `createContext` where we create the context.
 * This is useful for testing when we don&#x27;t want to mock Next.js&#x27; request/response
 */</span>
<span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createContextInner</span><span class="token punctuation">(</span><span class="token punctuation">{</span> auth <span class="token punctuation">}</span><span class="token operator">:</span> <span class="token maybe-class-name">AuthContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span> auth <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword module">export</span> <span class="token keyword">type</span> <span class="token class-name"><span class="token maybe-class-name">Context</span></span> <span class="token operator">=</span> trpc<span class="token punctuation">.</span><span class="token property-access">inferAsyncReturnType</span><span class="token operator">&lt;</span><span class="token keyword">typeof</span> createContextInner<span class="token operator">&gt;</span>

<span class="token doc-comment comment">/**
 * Creates context for an incoming request
 * <span class="token keyword">@link</span> https://trpc.io/docs/context
 */</span>
<span class="token keyword module">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">createContext</span><span class="token punctuation">(</span>
  opts<span class="token operator">:</span> trpcNext<span class="token punctuation">.</span><span class="token property-access"><span class="token maybe-class-name">CreateNextContextOptions</span></span>
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token known-class-name class-name">Promise</span><span class="token operator">&lt;</span><span class="token maybe-class-name">Context</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// for API-response caching see https://trpc.io/docs/caching</span>

  <span class="token keyword control-flow">return</span> <span class="token keyword control-flow">await</span> <span class="token function">createContextInner</span><span class="token punctuation">(</span><span class="token punctuation">{</span> auth<span class="token operator">:</span> <span class="token function">getAuth</span><span class="token punctuation">(</span>opts<span class="token punctuation">.</span><span class="token property-access">req</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>As we have now access to our context, we can add add middleware to our trcp endpoints. Here we will check if the user is signed in and if not we will throw an error.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token comment">// src/server/trpc.ts</span>
<span class="token comment">// check if the user is signed in, otherwise through a UNAUTHORIZED CODE</span>
<span class="token keyword">const</span> isAuthed <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token method function property-access">middleware</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> next<span class="token punctuation">,</span> ctx <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword control-flow">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ctx<span class="token punctuation">.</span><span class="token property-access">auth</span><span class="token punctuation">.</span><span class="token property-access">userId</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword control-flow">throw</span> <span class="token keyword">new</span> <span class="token class-name"><span class="token known-class-name class-name">TRPCError</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> code<span class="token operator">:</span> <span class="token string">&#x27;UNAUTHORIZED&#x27;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword control-flow">return</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    ctx<span class="token operator">:</span> <span class="token punctuation">{</span>
      auth<span class="token operator">:</span> ctx<span class="token punctuation">.</span><span class="token property-access">auth</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> protectedProcedure <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token property-access">procedure</span><span class="token punctuation">.</span><span class="token method function property-access">use</span><span class="token punctuation">(</span>isAuthed<span class="token punctuation">)</span>
</code></pre>
<p>What this allows us is to just use the new added middleware/procedure in our endpoint.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> z <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;zod&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> prisma <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;../prisma&#x27;</span>
<span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> protectedProcedure<span class="token punctuation">,</span> publicProcedure<span class="token punctuation">,</span> router <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;../trcp&#x27;</span>

<span class="token keyword module">export</span> <span class="token keyword">const</span> guestbookRouter <span class="token operator">=</span> <span class="token function">router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  list<span class="token operator">:</span> publicProcedure<span class="token punctuation">.</span><span class="token method function property-access">query</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * For pagination docs you can have a look here
     * <span class="token keyword">@see</span> https://trpc.io/docs/useInfiniteQuery
     * <span class="token keyword">@see</span> https://www.prisma.io/docs/concepts/components/prisma-client/pagination
     */</span>

    <span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token keyword control-flow">await</span> prisma<span class="token punctuation">.</span><span class="token property-access">guestbook</span><span class="token punctuation">.</span><span class="token method function property-access">findMany</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      include<span class="token operator">:</span> <span class="token punctuation">{</span> user<span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
      orderBy<span class="token operator">:</span> <span class="token punctuation">{</span>
        createdAt<span class="token operator">:</span> <span class="token string">&#x27;desc&#x27;</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword control-flow">return</span> <span class="token punctuation">{</span>
      messages<span class="token punctuation">,</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token comment">// the added middleware `protectedProcedure` will check if the user is signed in if not it will throw an error.</span>
  add<span class="token operator">:</span> protectedProcedure
    <span class="token punctuation">.</span><span class="token method function property-access">input</span><span class="token punctuation">(</span>
      z<span class="token punctuation">.</span><span class="token method function property-access">object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        email<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token method function property-access">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">email</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        name<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token method function property-access">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">min</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        message<span class="token operator">:</span> z<span class="token punctuation">.</span><span class="token method function property-access">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token method function property-access">min</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token method function property-access">mutation</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> input<span class="token punctuation">,</span> ctx <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token arrow operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> newInput <span class="token operator">=</span> <span class="token punctuation">{</span>
        userId<span class="token operator">:</span> ctx<span class="token punctuation">.</span><span class="token property-access">auth</span><span class="token punctuation">.</span><span class="token property-access">userId</span><span class="token punctuation">,</span>
        email<span class="token operator">:</span> input<span class="token punctuation">.</span><span class="token property-access">email</span><span class="token punctuation">,</span>
        name<span class="token operator">:</span> input<span class="token punctuation">.</span><span class="token property-access">name</span><span class="token punctuation">,</span>
        message<span class="token operator">:</span> input<span class="token punctuation">.</span><span class="token property-access">message</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token keyword control-flow">await</span> prisma<span class="token punctuation">.</span><span class="token property-access">guestbook</span><span class="token punctuation">.</span><span class="token method function property-access">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        data<span class="token operator">:</span> newInput<span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token keyword control-flow">return</span> message
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
<p>Now we have kind of a working authentication system running. For convenience reasons we will add two things. First, add a webhook to keep clerk and our database in sync.
Webhooks are how services notify each other of events. Basically just ah <code>POST</code> request with some payload that goes to an pre-determined endpoint.
Second update the JWT and session claims to add fields to our auth/session tokens.</p>
<p>For adding a webhook go to the Clark dashboard and click on the <code>Webhooks</code> link. Add a new webhook and select the <code>User Signed In</code> event.
Then add the url to your backend. In our case it is <code>https://api.yourdomain.com/api/webhooks/clerk/user-signed-in</code>.</p>
<p>Because webhooks can be easily missused we add a library caled svix for verifying the webhook. You can read more on their <a href="https://docs.svix.com/">documentation</a>.
For local debugging I also recommend to install their <a href="https://docs.svix.com/tutorials/cli">CLI</a>.</p>
<p>Second thing is we will update the JWT token details to include not only the <code>userId</code> but in our case also the <code>email</code>, <code>firstName</code>, <code>lastName</code> and <code>web3Wallets</code>.
These are called claims. You also can add such claims for other third party services like stripe or github if you want to interact with those.
Just go to your clerk dashboard and click on the <code>JWT Templates</code> link. Add the details as in the image or read up on the stuff in the right bottom corner.</p>
<img alt="clerk custom jwt" loading="lazy" width="1397" height="891" decoding="async" data-nimg="1" style="color:transparent" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fjwt.63531906.png&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fjwt.63531906.png&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fjwt.63531906.png&amp;w=3840&amp;q=75"/>
<p>Now the email, firstName,... are added to your JWT. And can be easily accessed via your <code>useUser</code> hook.</p>
<pre class="language-typescript"><code class="language-typescript"><span class="token keyword module">import</span> <span class="token imports"><span class="token punctuation">{</span> useUser <span class="token punctuation">}</span></span> <span class="token keyword module">from</span> <span class="token string">&#x27;@clerk/nextjs&#x27;</span>
<span class="token keyword module">export</span> <span class="token keyword module">default</span> <span class="token keyword">function</span> <span class="token function"><span class="token maybe-class-name">Index</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">{</span> isLoaded<span class="token punctuation">,</span> isSignedIn<span class="token punctuation">,</span> user <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token console class-name">console</span><span class="token punctuation">.</span><span class="token method function property-access">log</span><span class="token punctuation">(</span><span class="token string">&#x27;user&#x27;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span>
  <span class="token comment">//todo manuel add the return of the user</span>




</code></pre>
<p>Same for the backend. You need to update the session to include the claims and can access them with the <code>getAuth</code> function or via the context.
// todo manuel add the web3wallets and add the image of the sessions in the clerk dashbaord</p>
<pre class="language-typescript"><code class="language-typescript">ctx <span class="token punctuation">{</span>
  actor<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
  sessionClaims<span class="token operator">:</span> <span class="token punctuation">{</span>
    azp<span class="token operator">:</span> <span class="token string">&#x27;http://localhost:3000&#x27;</span><span class="token punctuation">,</span>
    email<span class="token operator">:</span> <span class="token keyword null nil">null</span><span class="token punctuation">,</span>
    exp<span class="token operator">:</span> <span class="token number">1678276727</span><span class="token punctuation">,</span>
    firstName<span class="token operator">:</span> <span class="token string">&#x27;Clark&#x27;</span><span class="token punctuation">,</span>
    iat<span class="token operator">:</span> <span class="token number">1678276667</span><span class="token punctuation">,</span>
    iss<span class="token operator">:</span> <span class="token string">&#x27;https://vast-ostrich-16.clerk.accounts.dev&#x27;</span><span class="token punctuation">,</span>
    jti<span class="token operator">:</span> <span class="token string">&#x27;fe8915affaa83af9d10e&#x27;</span><span class="token punctuation">,</span>
    lastName<span class="token operator">:</span> <span class="token string">&#x27;Kent&#x27;</span><span class="token punctuation">,</span>
    nbf<span class="token operator">:</span> <span class="token number">1678276657</span><span class="token punctuation">,</span>
    sid<span class="token operator">:</span> <span class="token string">&#x27;sess_2MjB3LIcLMDC464laFoIkrRZiTu&#x27;</span><span class="token punctuation">,</span>
    sub<span class="token operator">:</span> <span class="token string">&#x27;user_2Mj8pdXGjEPXYNNBXPI1gXDjxT3&#x27;</span><span class="token punctuation">,</span>
    userId<span class="token operator">:</span> <span class="token string">&#x27;user_2Mj8pdXGjEPXYNNBXPI1gXDjxT3&#x27;</span><span class="token punctuation">,</span>
    web3Wallets<span class="token operator">:</span> <span class="token string">&#x27;{{user.web3Wallets}}&#x27;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  sessionId<span class="token operator">:</span> <span class="token string">&#x27;sess_2MjB3LIcLMDC464laFoIkrRZiTu&#x27;</span><span class="token punctuation">,</span>
  session<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
  userId<span class="token operator">:</span> <span class="token string">&#x27;user_2Mj8pdXGjEPXYNNBXPI1gXDjxT3&#x27;</span><span class="token punctuation">,</span>
  user<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
  orgId<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
  orgRole<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
  orgSlug<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
  organization<span class="token operator">:</span> <span class="token keyword nil">undefined</span><span class="token punctuation">,</span>
  getToken<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function"><span class="token maybe-class-name">AsyncFunction</span></span> <span class="token punctuation">(</span>anonymous<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
  debug<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token known-class-name class-name">Function</span> <span class="token punctuation">(</span>anonymous<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token template-punctuation string">`</span></span>`

</code></pre>]]></content:encoded>
            <author>bichler@gmail.com (Manuel Bichler)</author>
        </item>
        <item>
            <title><![CDATA[The midlife crisis begins]]></title>
            <link>http://localhost:3000/articles/midlife-crisis</link>
            <guid>http://localhost:3000/articles/midlife-crisis</guid>
            <pubDate>Thu, 12 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[We hop hop hop. From crisis to crisis.]]></description>
            <content:encoded><![CDATA[<h1>A spoiled brats crisis</h1>
<p>I am in my late 30s. I&#x27;ve spend my midlife crisis with corona. A war between ukraine and russia. And then there are the personal things like a stroke of a loved one. A divorce. A break up. Some useless fights.
This all sucks. It plainly shows you how fragile life is. How much you can lose in a short amount of time. It somehow makes you feel like you are not in control. Even though you only
just began feeling like an adult. You know, complaining about that the only letters you get are invoices. How bad the coffee in your company kitchen is. How bad hangovers became. But I imagine this is what it feels like to be an adult. And it fucking sucks.
I guess I finally know what they mean with &quot;In the old days everything was better.&quot; It&#x27;s the memories of yourself in the so called - prime of your life - that makes you feel that way. There was no adult bullshit.</p>
<p>The latest tiktok filter beamed you back to your late teens/early twenties. People started crying. I guess as a fairly young person you don&#x27;t know the feeling of being old. At least I didn&#x27;t. But it&#x27;s here now. I, for the first time in my life feel old.
And this comes hand in hand with expectations. You need to have a plan. You need to have a job that is valued by society. You need to have blablabla. You know, all the stuff that people expect from you.
You should be married. You should have kids. You should... should... should. But that&#x27;s not the thing that bothers me that much.</p>
<p>The thing that bothers me, is the stuff that I expect from myself. Things such as becoming a founder.
Quitting alcohol. Becoming fit again. Or starting a family. Plant a tree. Move in a house. You know that kind of stuff...
It always seemed there is so much time to fuck around. But time becomes more precious day by day.
You finally want stuff that was a couple years ago far far away. I guess mother nature finds it&#x27;s way and plants the seeds in your heart, mind or wherever you think this stuff shows up.</p>
<p>Sounds and feels like a new life phase to me. And as we all know we have a couple of them. I mean rember your transition from teenager to early adulthood. Was that fun? No.
But I am looking forward to my next phase. Because with every crisis there comes new opporunities.</p>
<p>I feel blessed that I have the luxury to still have the possibility to do all these things. At least those that are in my control. But I also feel like I am running out of time. Which is a weird feeling.
A feeling I had never before in my life. And I don&#x27;t like it. But I will learn to deal with it. Makes me think about working in ageing and help solving the &quot;aging disease&quot;.
Some of the problems would be surley solved by that. Some new ones would arise. But that&#x27;s for another time.</p>
<p>And then you are 40 and you are still single. Have no clue what to do with your life. And you feel like the world moved on without you.
I think in todays world with all this social media crap, where everyone is prettier, smarter, richer, more successful, more whatever... it&#x27;s hard to feel like you are good enough.</p>
<p>But I think everyone knows that this is bullshit. We finally have to struggle with similar things. Things that can&#x27;t be fixed with $. Or followers. Or likes.</p>
<p>I believe, what doesn&#x27;t kill you makes you stronger. Without downs there aren&#x27;t any ups. And the good stuff is worth the wait.</p>
<p>So keep struggling and enjoy the fuckin ride. There will be stories to tell. Love will find you!</p>]]></content:encoded>
            <author>bichler@gmail.com (Manuel Bichler)</author>
        </item>
        <item>
            <title><![CDATA[Rust will be used everywhere]]></title>
            <link>http://localhost:3000/articles/rust-everywhere</link>
            <guid>http://localhost:3000/articles/rust-everywhere</guid>
            <pubDate>Thu, 12 Jan 2023 00:00:00 GMT</pubDate>
            <description><![CDATA[Setting up Docker for your project can be a pain. This article will help you to get started with Docker and Docker Compose.]]></description>
            <content:encoded><![CDATA[<h1>Introduction to Docker</h1>
<h2>What is Docker?</h2>
<p>Docker is a platform that lets you easily build, deploy, and run apps in containers, making your development and production environments more consistent and streamlined.</p>
<h2>What problems does Docker solve?</h2>
<p>Docker solves the problem of &quot;it works on my machine&quot; by allowing developers to package their application and its dependencies into a self-contained unit called a container. The container can run consistently across different environments, making it easier to move from development to production and reducing the risk of compatibility issues. This helps to improve collaboration between teams and increase the speed and efficiency of the development process.</p>
<h3>Let&#x27;s start with a simple example</h3>
<p>Let&#x27;s say you have a simple Node.js application that you want to run on your local machine. You can install Node.js and all the dependencies of your application on your machine, but this can be a pain. You can also use a virtual machine to run your application, but this is also a pain. Docker solves this problem by allowing you to package your application and its dependencies into a container. The container can run consistently across different environments, making it easier to move from development to production and reducing the risk of compatibility issues. This helps to improve collaboration between teams and increase the speed and efficiency of the development process.</p>
<p>What you often end up with is a Dockerfile that looks like this:</p>
<p>FROM node:10</p>
<h1>Create app directory</h1>
<p>WORKDIR /usr/src/app</p>
<h1>Install app dependencies</h1>
<p>COPY package*.json ./</p>
<p>RUN npm install</p>
<h1>If you are building your code for production</h1>
<h1>RUN npm ci --only=production</h1>
<h1>Bundle app source</h1>
<p>COPY . .</p>
<p>EXPOSE 8080</p>
<p>CMD [ &quot;node&quot;, &quot;server.js&quot; ]</p>
<p>This Dockerfile defines an application that uses Node.js 10 as its base image. It then copies the package.json file from your project directory into the Docker image and runs npm install to install the dependencies of your application. It also copies the rest of your project into the Docker image and sets the working directory to /usr/src/app . Finally, it exposes port 8080 and runs the node server.js command to start your application.</p>]]></content:encoded>
            <author>bichler@gmail.com (Manuel Bichler)</author>
        </item>
        <item>
            <title><![CDATA[Crafting a design system for a multiplanetary future]]></title>
            <link>http://localhost:3000/articles/crafting-a-design-system-for-a-multiplanetary-future</link>
            <guid>http://localhost:3000/articles/crafting-a-design-system-for-a-multiplanetary-future</guid>
            <pubDate>Mon, 05 Sep 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Most companies try to stay ahead of the curve when it comes to visual design, but for Planetaria we needed to create a brand that would still inspire us 100 years from now when humanity has spread across our entire solar system.]]></description>
            <content:encoded><![CDATA[<p>Most companies try to stay ahead of the curve when it comes to visual design, but for Planetaria we needed to create a brand that would still inspire us 100 years from now when humanity has spread across our entire solar system.</p>
<img alt="" loading="lazy" width="1310" height="872" decoding="async" data-nimg="1" style="color:transparent" srcSet="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fplanetaria-design-system.d4cfce90.png&amp;w=1920&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fplanetaria-design-system.d4cfce90.png&amp;w=3840&amp;q=75 2x" src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fplanetaria-design-system.d4cfce90.png&amp;w=3840&amp;q=75"/>
<p>I knew that to get it right I was going to have to replicate the viewing conditions of someone from the future, so I grabbed my space helmet from the closet, created a new Figma document, and got to work.</p>
<h2>Sermone fata</h2>
<p>Lorem markdownum, bracchia in redibam! Terque unda puppi nec, linguae posterior
in utraque respicere candidus Mimasque formae; quae conantem cervice. Parcite
variatus, redolentia adeunt. Tyrioque dies, naufraga sua adit partibus celanda
torquere temptata, erit maneat et ramos, <a href="#">iam</a> ait dominari
potitus! Tibi litora matremque fumantia condi radicibus opusque.</p>
<p>Deus feram verumque, fecit, ira tamen, terras per alienae victum. Mutantur
levitate quas ubi arcum ripas oculos abest. Adest <a href="#">commissaque
victae</a> in gemitus nectareis ire diva
dotibus ora, et findi huic invenit; fatis? Fractaque dare superinposita
nimiumque simulatoremque sanguine, at voce aestibus diu! Quid veterum hausit tu
nil utinam paternos ima, commentaque.</p>
<pre class="language-c"><code class="language-c">exbibyte_wins <span class="token operator">=</span> <span class="token function">gigahertz</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
grayscaleUtilityClient <span class="token operator">=</span> control_uat<span class="token punctuation">;</span>
pcmciaHibernate <span class="token operator">=</span> <span class="token function">oop_virus_console</span><span class="token punctuation">(</span>text_mountain<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>stateWaisFirewire <span class="token operator">&gt;=</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    jfs <span class="token operator">=</span> <span class="token number">647065</span> <span class="token operator">/</span> <span class="token function">ldapVrml</span><span class="token punctuation">(</span>tutorialRestore<span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    metal_runtime_parse <span class="token operator">=</span> roomComputingResolution <span class="token operator">-</span> toolbarUpload <span class="token operator">+</span>
            ipx_nvram_open<span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    maximizeSidebar <span class="token operator">*=</span> <span class="token function">suffix_url</span><span class="token punctuation">(</span>flatbed <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> requirements_encoding_node <span class="token operator">+</span>
            only_qbe_media<span class="token punctuation">,</span> minicomputer<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>Aere repetiti cognataque natus. Habebat vela solutis saepe munus nondum adhuc
oscula nomina pignora corpus deserat.</p>
<h2>Lethaei Pindumve me quae dinumerat Pavor</h2>
<p>Idem se saxa fata pollentibus geminos; quos pedibus. Est urnis Herses omnes nec
divite: et ille illa furit sim verbis Cyllenius.</p>
<ol>
<li>Captus inpleverunt collo</li>
<li>Nec nam placebant</li>
<li>Siquos vulgus</li>
<li>Dictis carissime fugae</li>
<li>A tacitos nulla viginti</li>
</ol>
<p>Ungues fistula annoso, ille addit linoque motatque uberior verso
<a href="#">rubuerunt</a> confine desuetaque. <em>Sanguine</em> anteit
emerguntque expugnacior est pennas iniqui ecce <strong>haeret</strong> genus: peiora imagine
fossas Cephisos formosa! Refugitque amata <a href="#">refelli</a>
supplex. Summa brevis vetuere tenebas, hostes vetantis, suppressit, arreptum
regna. Postquam conpescit iuvenis habet corpus, et erratica, perdere, tot mota
ars talis.</p>
<pre class="language-c"><code class="language-c">digital<span class="token punctuation">.</span>webcam_dual_frequency <span class="token operator">=</span> webmasterMms<span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">+</span> language_standalone_google<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    cc_inbox_layout <span class="token operator">*=</span> file_character<span class="token punctuation">;</span>
    task <span class="token operator">+=</span> p<span class="token punctuation">;</span>
    lockUnicode <span class="token operator">+=</span> <span class="token function">enterprise_monochrome</span><span class="token punctuation">(</span>tokenFunctionPersonal<span class="token punctuation">,</span> keyVirtual<span class="token punctuation">,</span>
            adf<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">windows_binary_esports</span><span class="token punctuation">(</span><span class="token number">87734</span><span class="token punctuation">,</span> <span class="token function">array</span><span class="token punctuation">(</span>restoreRomTopology<span class="token punctuation">,</span> <span class="token function">adRaw</span><span class="token punctuation">(</span><span class="token number">407314</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        dongleBashThumbnail<span class="token punctuation">)</span><span class="token punctuation">,</span> interpreter<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>Sit volat naturam; motu Cancri. Erat pro simul quae valuit quoque timorem quam
proelia: illo patrio <em>esse summus</em>, enim sua serpentibus, Hyleusque. Est coniuge
recuso; refert Coroniden ignotos manat, adfectu.</p>]]></content:encoded>
            <author>bichler@gmail.com (Manuel Bichler)</author>
        </item>
    </channel>
</rss>